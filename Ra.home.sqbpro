<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Ivan Lee/Documents/Software project/Machine learning/AI/Stock/139/Ra/Ra_calculate/Ra.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="2951"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainresult2"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Cache" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="0" value="130"/><column index="1" value="54"/><column index="2" value="123"/><column index="3" value="123"/><column index="4" value="123"/><column index="5" value="123"/><column index="6" value="123"/><column index="7" value="123"/><column index="8" value="123"/><column index="9" value="123"/><column index="10" value="130"/><column index="11" value="130"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="NorRaw" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="106"/><column index="2" value="52"/><column index="3" value="75"/><column index="4" value="75"/><column index="5" value="75"/><column index="6" value="147"/><column index="7" value="165"/><column index="8" value="70"/><column index="9" value="174"/><column index="10" value="72"/><column index="11" value="174"/><column index="12" value="85"/><column index="13" value="183"/><column index="14" value="74"/><column index="15" value="174"/><column index="16" value="165"/><column index="17" value="59"/><column index="18" value="69"/><column index="19" value="67"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="RaceCard" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="53"/><column index="3" value="64"/><column index="4" value="116"/><column index="5" value="95"/><column index="6" value="40"/><column index="7" value="40"/><column index="8" value="100"/><column index="9" value="64"/><column index="10" value="40"/><column index="11" value="59"/><column index="12" value="64"/><column index="13" value="40"/><column index="14" value="61"/><column index="15" value="156"/><column index="16" value="89"/><column index="17" value="64"/><column index="18" value="40"/><column index="19" value="64"/><column index="20" value="40"/><column index="21" value="64"/><column index="22" value="92"/><column index="23" value="101"/><column index="24" value="285"/><column index="25" value="130"/><column index="26" value="127"/><column index="27" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="h" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="116"/><column index="3" value="209"/><column index="4" value="223"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="h_t3" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="130"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="r" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="116"/><column index="3" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="r_t3" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="123"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="result1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="53"/><column index="3" value="59"/><column index="4" value="46"/><column index="5" value="59"/><column index="6" value="116"/><column index="7" value="116"/><column index="8" value="116"/><column index="9" value="123"/><column index="10" value="123"/><column index="11" value="123"/><column index="12" value="40"/><column index="13" value="40"/><column index="14" value="40"/><column index="15" value="123"/><column index="16" value="123"/><column index="17" value="123"/><column index="18" value="74"/><column index="19" value="40"/><column index="20" value="40"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="result2" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="0" value="116"/><column index="1" value="116"/><column index="2" value="116"/><column index="3" value="116"/><column index="4" value="116"/><column index="5" value="116"/><column index="6" value="116"/><column index="7" value="116"/><column index="8" value="116"/><column index="9" value="116"/><column index="10" value="130"/><column index="11" value="130"/><column index="12" value="130"/><column index="13" value="130"/><column index="14" value="130"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="result3" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="0" value="137"/><column index="1" value="137"/><column index="2" value="137"/><column index="3" value="137"/><column index="4" value="137"/><column index="5" value="137"/><column index="6" value="137"/><column index="7" value="137"/><column index="8" value="137"/><column index="9" value="137"/><column index="10" value="137"/><column index="11" value="137"/><column index="12" value="137"/><column index="13" value="137"/><column index="14" value="137"/><column index="15" value="137"/><column index="16" value="137"/><column index="17" value="137"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="result4" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="40"/><column index="3" value="59"/><column index="4" value="116"/><column index="5" value="130"/><column index="6" value="46"/><column index="7" value="146"/><column index="8" value="130"/><column index="9" value="59"/><column index="10" value="116"/><column index="11" value="130"/><column index="12" value="123"/><column index="13" value="130"/><column index="14" value="130"/><column index="15" value="116"/><column index="16" value="123"/><column index="17" value="123"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="result5" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="40"/><column index="3" value="46"/><column index="4" value="59"/><column index="5" value="46"/><column index="6" value="59"/><column index="7" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="result6" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="40"/><column index="3" value="46"/><column index="4" value="59"/><column index="5" value="157"/><column index="6" value="59"/><column index="7" value="132"/><column index="8" value="45"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Predict_3.2.sql">-- Normalise history data
DROP TABLE IF EXISTS NorRaw; -- calculate the whole race
CREATE TABLE NorRaw AS
with 
raw as (
		SELECT 
			LocalResults.dt,
			CAST( REPLACE(名次,' ','') AS INTEGER ) o,
			case when instr(馬名, '(')&gt;=1 then (substr(馬名, 0, instr(馬名, '('))) else 馬名 end h,
			case when instr(騎師, '(')&gt;=1 then (substr(騎師, 0, instr(騎師, '('))) else 騎師 end r,
			case when instr(練馬師, '(')&gt;=1 then (substr(練馬師, 0, instr(練馬師, '('))) else 練馬師 end t,
			實際負磅*1.0 rw,-- real weight (just horse)
			排位體重*1.0 cw,-- comparitive weight (horse with rider and wearing)
			(排位體重-實際負磅)*1.0 rww,-- rider with weight
			完成時間 ct -- complete time
			,((substr(完成時間,0,instr(完成時間,':'))*60)+(substr(完成時間, instr(完成時間, ':')+1,length(完成時間)-1)))*1.0 dursec
			,meters*1.0 meters
			,獨贏賠率*1.0 wb -- win bounis
			,檔位*1.0 p
		from LocalResults, LocalResultsComInfo
		where o!=0 and LocalResults.dt=LocalResultsComInfo.dt
)
,RaceVar as (
	select 
		dt
		,min(o)*1.0 mino, max(o)*1.0 maxo, count(*) uc -- unit count
		,min(rww) minrww, max(rww) maxrww -- rider with waering
		,min(cw) mincw,max(cw) maxcw
		,min(rw) minrw,max(rw) maxrw
		,min(wb) minwb,max(wb) maxwb
		,min(dursec) mindursec,max(dursec) maxdursec
		,min(p) minp,max(p) maxp
	from raw a
	group by a.dt
)
select 
	a.dt
	,o
	,h,r,t
	,(b.meters/dursec) mark --speed mark
	,(rw-minrw)/(maxrw-minrw) rw
	,(ROW_NUMBER () OVER (Partition by a.dt ORDER BY rw desc)) rwrank
	,(cw-mincw)/(maxcw-mincw) cw
	,(ROW_NUMBER () OVER (Partition by a.dt ORDER BY cw desc)) cwrank
	,(rww-minrww)/(maxrww-minrww) rww
	,(ROW_NUMBER () OVER (Partition by a.dt ORDER BY rww desc)) rwwrank
	,(wb-minwb)/(maxwb-minwb) wb
	,(ROW_NUMBER () OVER (Partition by a.dt ORDER BY wb asc)) wbrank
	,(dursec-mindursec)/(maxdursec-mindursec) ndursec
	,(p-minp)/(maxp-minp) p
	,(ROW_NUMBER () OVER (Partition by a.dt ORDER BY p asc)) prank
	,b.meters,dursec
from raw b,RaceVar a
where a.dt=b.dt
order by b.dt desc,o asc
;

-- unit data cache
DROP TABLE IF EXISTS h; CREATE TABLE h as select h,max(mark) mam,avg(mark) avo,min(mark) mim,meters,count(*) c from NorRaw group by h,meters;
DROP TABLE IF EXISTS r; CREATE TABLE r as select r,max(mark) mam,avg(mark) avo,min(mark) mim,meters,count(*) c from NorRaw group by r,meters;
DROP TABLE IF EXISTS t; CREATE TABLE t as select t,max(mark) mam,avg(mark) avo,min(mark) mim,meters,count(*) c from NorRaw group by t,meters;

--上名率
DROP TABLE IF EXISTS h_t3; CREATE TABLE h_t3 AS 
WITH 
a as (select h,meters,count(*) a from NorRaw group by h,meters)
,c as (select h,meters,count(*) c from NorRaw where o &gt;=3 group by h,meters)
select a.h,a.meters,c*1.0/a a from a,c where a.h=c.h
;
DROP TABLE IF EXISTS r_t3; CREATE TABLE r_t3 AS 
WITH 
a as (select r,meters,count(*) a from NorRaw group by r,meters)
,c as (select r,meters,count(*) c from NorRaw where o &gt;=3 group by r,meters)
select a.r,a.meters,c*1.0/a a from a,c where a.r=c.r
;
DROP TABLE IF EXISTS t_t3; CREATE TABLE t_t3 AS 
WITH 
a as (select t,meters,count(*) a from NorRaw group by t,meters)
,c as (select t,meters,count(*) c from NorRaw where o &gt;=3 group by t,meters)
select a.t,a.meters,c*1.0/a a from a,c where a.t=c.t
;

-- rate effectiveness
DROP TABLE IF EXISTS Cache;
CREATE TABLE Cache as 
with
effectivenessRates as (
	select
		meters,
		(
			with ana as ( select h ke1, meters ke2,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where a.meters=b.meters group by ke1,ke2 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) havm, (
			with ana as ( select r ke1, meters ke2,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where a.meters=b.meters group by ke1,ke2 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) ravm, (
			with ana as ( select t ke1, meters ke2,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where a.meters=b.meters group by ke1,ke2 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) tavm, (
			with ana as ( select h ke1, meters ke2,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where o&lt;=3 and a.meters=b.meters group by ke1,ke2 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) h3t, (
			with ana as ( select r ke1, meters ke2,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where o&lt;=3 and a.meters=b.meters group by ke1,ke2 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) r3t, (
			with ana as ( select t ke1, meters ke2,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where o&lt;=3 and a.meters=b.meters group by ke1,ke2 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) t3t, (
			with ana as ( select wb ke1,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where a.meters=b.meters group by ke1 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) wb, (
			with ana as ( select rw ke1,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where a.meters=b.meters group by ke1 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) rw, (
			with ana as ( select rww ke1,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where a.meters=b.meters group by ke1 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) rww, (
			with ana as ( select p ke1,(max(mark)-min(mark)) dif, count(*) c from NorRaw a where a.meters=b.meters group by ke1 ) select ((min(dif)+avg(dif)+max(dif))/3) ef from ana where c&gt;1
		) p
	from NorRaw b group by meters
)
,sum as (
	SELECT 
		meters,( -- real count of data factor
		havm+ravm+tavm
		+h3t+r3t+t3t
		+wb
		-- +rw+rww
		+p
	) sum from effectivenessRates
)
,sum1 as (
	select 
		effectivenessRates.meters,
		(sum-havm/sum) havm
		,(sum-ravm/sum) ravm
		,(sum-tavm/sum) tavm 
		,(sum-h3t/sum) h3t
		,(sum-r3t/sum) r3t
		,(sum-t3t/sum) t3t 
		,(sum-wb/sum) wb
		--,(sum-rw/sum) rw,(sum-rww/sum) rww
		,(sum-p/sum) p
	from effectivenessRates,sum
	where effectivenessRates.meters=sum.meters
)
,sum2 as (
	SELECT 
		meters,
		(
			havm+ravm+tavm
			+h3t+r3t+t3t
			+wb
			--+rw+rww
			+p
		) sum,
		(h3t+r3t+t3t) sum1
	from sum1
)
,sum3 as (
	select 
		sum1.meters,
		(havm/sum) havm
		,(ravm/sum) ravm
		,(tavm/sum) tavm 
		,(h3t/sum) h3t
		,(r3t/sum) r3t
		,(t3t/sum) t3t 
		,(wb/sum) wb
		--,(rw/sum) rw,(rww/sum) rww
		,(p/sum) p
		,(h3t/sum1) h3t1
		,(r3t/sum1) r3t1
		,(t3t/sum1) t3t1
	from sum1,sum2
	where sum1.meters=sum2.meters
)
select * from sum3
;

-- calculation begin - data preprocess
DROP TABLE IF EXISTS result1;
CREATE TABLE result1 as 
with
	Rand as (
		select --潘明輝(-2)
			meter,
			case when instr(馬名, '(')&gt;=1 then (substr(馬名, 0, instr(馬名, '('))) else 馬名 end h,
			case when instr(騎師, '(')&gt;=1 then (substr(騎師, 0, instr(騎師, '('))) else 騎師 end r,
			case when instr(練馬師, '(')&gt;=1 then (substr(練馬師, 0, instr(練馬師, '('))) else 練馬師 end t,
			馬名 h,
			騎師 r,
			練馬師 t,
			b.*,
			今季獎金 wb,
			負磅 rw,
			檔位 p
		from RaceCard b
		where dt=(select dt from RaceCard order by dt desc limit 1)
	)
	select 
		Rand.dt,
		meter*1.0 meter,
		raceno+0 raceno,
		Rand.h,Rand.r,Rand.t,
		IFNULL((select avo from h where h.h like '%'||Rand.h||'%'),0) havo,
		IFNULL((select avo from r where r.r like '%'||Rand.r||'%'),0) ravo,
		IFNULL((select avo from t where t.t like '%'||Rand.t||'%'),0) tavo,
		--(select value from Cache where `key`='havm') havm,
		--(select value from Cache where `key`='ravm') ravm,
		--(select value from Cache where `key`='tavm') tavm,
		-- IFNULL((select c from h where h.h like '%'||Rand.h||'%'),0) hc, IFNULL((select c from r where r.r like '%'||Rand.r||'%'),0) rc, IFNULL((select c from t where t.t like '%'||Rand.t||'%'),0) tc,
		--(select value from Cache where `key`='wb') wbef,
		--(select value from Cache where `key`='rw') rwef,
		--(select value from Cache where `key`='p') pef,
		wb*1.0 wb,
		rw*1.0 rw,
		p*1.0 p
	from 
		Rand
	group by Rand.dt,Rand.h
;

-- Prevent no records
DROP TABLE IF EXISTS preventnull;
CREATE TABLE preventnull as 
	select 
		dt,raceno
		,(select avg(b.havo) from result1 b where b.havo&gt;0) ahavo
		,(select avg(b.ravo) from result1 b where b.havo&gt;0) aravo
		,(select avg(b.tavo) from result1 b where b.havo&gt;0) atavo
	from result1 a
	group by dt,raceno
;

-- Prepare for normalization
DROP TABLE IF EXISTS preNor;
CREATE TABLE preNor as 
	select 
		dt,raceno
		,max(wb) maxwb,min(wb) minwb
		--,max(rw) maxrw,min(rw) minrw
		,max(p) maxp, min(p) minp
	from result1
	group by dt,raceno
;

-- normalization
DROP TABLE IF EXISTS result2;
CREATE TABLE result2 as 
	select 
		result1.dt
		,meter
		,result1.raceno
		,h,r,t
		,(case when havo=0 then (ahavo) else havo end) havo
		,(case when ravo=0 then (aravo) else ravo end) ravo
		,(case when tavo=0 then (atavo) else tavo end) tavo
		,(select a from h_t3 where h_t3.h=result1.h) h3t
		,(select a from r_t3 where r_t3.r=result1.r) r3t
		,(select a from t_t3 where t_t3.t=result1.t) t3t
		,(1-((wb-minwb)/(maxwb-minwb))) wb
		--,(rw-minrw)/(maxrw-minrw) rw
		,1-(p-minp)/(maxp-minp) p
		--,havm,ravm,tavm
		--,hc,rc,tc
	from result1,preventnull,preNor
	where 1=1
	and preventnull.dt=result1.dt 
	and result1.raceno=preventnull.raceno
	and preNor.dt=result1.dt 
	and result1.raceno=preNor.raceno
;

-- naming and translation
DROP TABLE IF EXISTS result3;
CREATE TABLE result3 as 
	select 
		dt 日期,
		raceno 埸次,
		meter 路程,
		h 馬,
		r 騎師,
		t 訓練師,
		result2.havo*Cache.havm 馬勝率,
		result2.ravo*Cache.ravm 騎師勝率,
		result2.tavo*Cache.tavm 訓練師勝率,
		result2.h3t*Cache.h3t 馬上名率,
		result2.r3t*Cache.r3t 騎師上名率,
		result2.t3t*Cache.t3t 訓練師上名率,
		result2.h3t*Cache.h3t1 馬上名率1,
		result2.r3t*Cache.r3t1 騎師上名率1,
		result2.t3t*Cache.t3t1 訓練師上名率1,
		result2.p*Cache.p 排位勝率,
		-- result2.rw*Cache.rw 馬負磅勝率, -- case when rw=0 then 0.1 else rw end
		result2.wb*Cache.wb 賠率勝率 -- case when wb=0 then 0.1 else wb end
	from result2,Cache
	where result2.meter=Cache.meters
;

-- second integrate various kinds of rate
DROP TABLE IF EXISTS result4;
CREATE TABLE result4 as 
select
	日期,埸次,
	路程,
	馬,
	--round(馬勝率,4) 馬勝率,馬上名率,--馬上Q率,
	騎師,
	--round(騎師勝率,4) 騎師勝率,騎師上名率,--騎師上Q率,
	訓練師,
	--round(訓練師勝率,4) 訓練師勝率,訓練師上名率--,訓練師上Q率
	(馬勝率+馬上名率+騎師勝率+騎師上名率+訓練師勝率+訓練師勝率+訓練師上名率+排位勝率+賠率勝率) 綜合勝率,
	(馬上名率1+騎師上名率1+訓練師上名率1) 上名率
	--,round(非人為臨埸勝率,4) 臨埸勝率
	--,round(單位綜合勝率,4) 單位勝率
	--,round(排位勝率,4) 排位勝率
	--,round(馬負磅勝率,4) 馬負磅勝率
	--,round((單位綜合勝率+臨埸比例勝率),4) 賠率綜合勝率
	--,round(臨埸比例勝率,4) 賠率臨埸勝率
	--,round(賠率勝率,4) 賠率勝率
	--,round(馬勝率,4) 馬勝率,round(騎師勝率,4) 騎師勝率,round(訓練師勝率,4) 訓練師勝率
from result3
-- where 埸次 in (4,5,6)
order by 日期 desc,埸次 asc,綜合勝率 desc;

-- ranking sorting and indication
DROP TABLE IF EXISTS result5;
CREATE TABLE result5 as 
select
	日期,埸次
	,路程
	,馬
	,騎師
	,訓練師
	,綜合勝率,(ROW_NUMBER () OVER (Partition by 日期,埸次 ORDER BY 綜合勝率 desc)) rank1
	,上名率,(ROW_NUMBER () OVER (Partition by 日期,埸次 ORDER BY 上名率 desc)) rank2
from result4
order by 日期 desc,埸次 asc,綜合勝率 desc;

commit;</sql><sql name="SQL 10">select meters,avg(avo) avavo from h group by meters;</sql><current_tab id="0"/></tab_sql></sqlb_project>
